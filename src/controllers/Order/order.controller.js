const { VNPay, ProductCode, VnpLocale, ignoreLogger } = require('vnpay');
const Order = require('../../model/Order');
const Product = require('../../model/SanPham');  // Import model s·∫£n ph·∫©m
const nodemailer = require('nodemailer');
const mongoose = require("mongoose");
const SePayTransaction = require('../../model/SepayTransaction');
require('dotenv').config();

const vnpay = new VNPay({
    tmnCode: 'ULFF3R39',
    secureSecret: 'X8AEKQN6VRZC43UF5ADL6TGB0Q0IOSTR',
    vnpayHost: 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html',
    testMode: true, // t√πy ch·ªçn, ghi ƒë√® vnpayHost th√†nh sandbox n·∫øu l√† true
    hashAlgorithm: 'SHA512', // t√πy ch·ªçn

    /**
     * S·ª≠ d·ª•ng enableLog ƒë·ªÉ b·∫≠t/t·∫Øt logger
     * N·∫øu enableLog l√† false, loggerFn s·∫Ω kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong b·∫•t k·ª≥ ph∆∞∆°ng th·ª©c n√†o
     */
    enableLog: true, // optional

    /**
     * H√†m `loggerFn` s·∫Ω ƒë∆∞·ª£c g·ªçi ƒë·ªÉ ghi log
     * M·∫∑c ƒë·ªãnh, loggerFn s·∫Ω ghi log ra console
     * B·∫°n c√≥ th·ªÉ ghi ƒë√® loggerFn ƒë·ªÉ ghi log ra n∆°i kh√°c
     *
     * `ignoreLogger` l√† m·ªôt h√†m kh√¥ng l√†m g√¨ c·∫£
     */
    loggerFn: ignoreLogger, // optional
});

// API t·∫°o ƒë∆°n h√†ng
const createOrder = async (req, res) => {
    try {
        const { lastName, firstName, email, address, phone, note,
            products, idKhachHang, thanhTien, soTienCanThanhToan, soTienGiamGia, giamGia, tongSoLuong
        } = req.body;

        console.log("lastName, firstName, email, address, phone, note: ", lastName, firstName, email, address, phone, note);
        console.log("products: ", products);
        console.log("idKhachHang: ", idKhachHang);
        console.log(" thanhTien, soTienCanThanhToan, soTienGiamGia, giamGia, tongSoLuong: ", thanhTien, soTienCanThanhToan, soTienGiamGia, giamGia, tongSoLuong); 
        
        // H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VND
        const formatCurrency = (amount) => {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
            }).format(amount);
        }

        //---- G·ª¨I X√ÅC NH·∫¨N ƒê∆†N H√ÄNG V·ªÄ EMAIL
        const transporter = nodemailer.createTransport({
            service: 'Gmail',
            auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
            }
        });

        // T·∫°o b·∫£ng HTML ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin ƒë∆°n h√†ng
        let productsHtml = '';

        // L·∫∑p qua c√°c s·∫£n ph·∫©m trong ƒë∆°n h√†ng
        for (const product of products) {
            // T√¨m s·∫£n ph·∫©m trong c∆° s·ªü d·ªØ li·ªáu b·∫±ng _idSP
            const productDetails = await Product.findById(product._idSP).exec();

            // Ki·ªÉm tra n·∫øu t√¨m th·∫•y s·∫£n ph·∫©m
            if (productDetails) {
                // Th√™m th√¥ng tin s·∫£n ph·∫©m v√†o b·∫£ng HTML
                productsHtml += `
                    <tr>
                        <td>${productDetails.TenSP}</td>  
                        <td>${product.size}</td>  
                        <td>${product.quantity}</td>  
                        <td>${formatCurrency(product.price)}</td>  <!-- Gi√° m·ªói s·∫£n ph·∫©m -->
                        <td>${formatCurrency(product.quantity * product.price)}</td>  <!-- T·ªïng ti·ªÅn cho s·∫£n ph·∫©m -->
                    </tr>
                `;
            }
        }       

        const sendOrderConfirmationEmail1 = async (toEmail) => {
            // T·∫°o n·ªôi dung email v·ªõi b·∫£ng s·∫£n ph·∫©m
            const mailOptions = {
                from: 'Kh·∫Øc T√∫',
                to: toEmail,
                subject: 'X√°c nh·∫≠n ƒë∆°n h√†ng c·ªßa b·∫°n.',
                html: `
                        <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                            <h2 style="text-align: center; color: #2c3e50; font-size: 24px;">C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng!</h2>
                            <p style="color: #34495e; font-size: 18px;">Ch√†o b·∫°n <span style="color: #e74c3c; font-weight: bold; font-style: italic;">${lastName} ${firstName}</span>,</p>
                            <p style="font-size: 16px;">ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.</p>
                            
                            <h3 style="color: #2c3e50; font-size: 20px; text-align: center;">Th√¥ng tin s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t h√†ng</h3>                                        
                            <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 20px; background-color: #ffffff;">
                                <thead>
                                    <tr>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">T√™n s·∫£n ph·∫©m</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">C·∫•u h√¨nh</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">S·ªë l∆∞·ª£ng</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">ƒê∆°n gi√°</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">T·ªïng ti·ªÅn</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${productsHtml}
                                </tbody>
                            </table>

                            <div style="background-color: #fff; padding: 15px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                                <p><strong>T·ªïng s·ªë l∆∞·ª£ng ƒë·∫∑t:</strong> <span style="color: #2980b9;">${tongSoLuong}</span> s·∫£n ph·∫©m</p>
                                <p><strong>T·ªïng ti·ªÅn:</strong> <span style="color: #e74c3c;">${formatCurrency(thanhTien)}</span></p>
                                <p><strong>Ph√≠ giao h√†ng:</strong> <span style="color: #2ecc71;">0</span></p>
                                <p><strong>Gi·∫£m gi√°:</strong> <span style="color: #e67e22;">-${formatCurrency(soTienGiamGia)}</span> (${giamGia}%)</p>
                                <p><strong>S·ªë ti·ªÅn c·∫ßn thanh to√°n:</strong> <span style="color: #e74c3c;">${formatCurrency(soTienCanThanhToan)}</span></p>
                            </div>
                
                            <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${phone}</p>
                            <p><strong>ƒê·ªãa ch·ªâ nh·∫≠n h√†ng:</strong> <span style="color: #34495e; font-style: italic;">${address}</span></p>
                            <br/>
                                                                                   
                            <p style="text-align: center; font-size: 16px;">B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng t·∫°i <a href="https://shopbandodientu.dokhactu.site" style="color: #3498db; text-decoration: none;">WebShop Kh·∫Øc T√∫</a></p>
                        </div>
                    `
            };

            return new Promise((resolve, reject) => {
                transporter.sendMail(mailOptions, (error, info) => {
                    if (error) {
                        reject(error);
                    } else {
                        console.log('Email sent: ' + info.response);
                        resolve();
                    }
                });
            });
        };
        const sendOrderConfirmationEmail = async (toEmail) => {
            // T·∫°o n·ªôi dung email v·ªõi b·∫£ng s·∫£n ph·∫©m
            const mailOptions = {
                from: 'Kh·∫Øc T√∫',
                to: toEmail,
                subject: 'üéâ X√°c nh·∫≠n ƒë∆°n h√†ng c·ªßa b·∫°n! üéâ',
                html: `
                    <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                        <h2 style="text-align: center; color: #2c3e50; font-size: 24px;">üíñ C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng! üíñ</h2>
                        <p style="color: #34495e; font-size: 18px;">Xin ch√†o <span style="color: #e74c3c; font-weight: bold; font-style: italic;">${lastName} ${firstName}</span>,</p>
                        <p style="font-size: 16px;">üéä ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n! üéä</p>
                        
                        <h3 style="color: #2c3e50; font-size: 20px; text-align: center;">üõí Th√¥ng tin s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t h√†ng üõçÔ∏è</h3>                                        
                        <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 20px; background-color: #ffffff;">
                            <thead>
                                <tr>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">üì¶ T√™n s·∫£n ph·∫©m</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">‚öôÔ∏è C·∫•u h√¨nh</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">üî¢ S·ªë l∆∞·ª£ng</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">üí∞ ƒê∆°n gi√°</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">üßæ T·ªïng ti·ªÅn</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${productsHtml}
                            </tbody>
                        </table>
        
                        <div style="background-color: #fff; padding: 15px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                            <p><strong>üì¶ T·ªïng s·ªë l∆∞·ª£ng ƒë·∫∑t:</strong> <span style="color: #2980b9;">${tongSoLuong}</span> s·∫£n ph·∫©m</p>
                            <p><strong>üí∞ T·ªïng ti·ªÅn:</strong> <span style="color: #e74c3c;">${formatCurrency(thanhTien)}</span></p>
                            <p><strong>üöö Ph√≠ giao h√†ng:</strong> <span style="color: #2ecc71;">Mi·ªÖn ph√≠</span></p>
                            <p><strong>üéÅ Gi·∫£m gi√°:</strong> <span style="color: #e67e22;">-${formatCurrency(soTienGiamGia)}</span> (${giamGia}%)</p>
                            <p><strong>üíµ S·ªë ti·ªÅn c·∫ßn thanh to√°n:</strong> <span style="color: #e74c3c; font-weight: bold;">${formatCurrency(soTienCanThanhToan)}</span></p>
                        </div>
            
                        <p><strong>üìû S·ªë ƒëi·ªán tho·∫°i:</strong> ${phone}</p>
                        <p><strong>üè† ƒê·ªãa ch·ªâ nh·∫≠n h√†ng:</strong> <span style="color: #34495e; font-style: italic;">${address}</span></p>
                        <br/>
                                                               
                        <p style="text-align: center; font-size: 16px;">üì¶ B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng t·∫°i <a href="https://shopbandodientu.dokhactu.site" style="color: #3498db; text-decoration: none; font-weight: bold;">WebShop Kh·∫Øc T√∫</a></p>
                    </div>
                `
            };
        
            return new Promise((resolve, reject) => {
                transporter.sendMail(mailOptions, (error, info) => {
                    if (error) {
                        reject(error);
                    } else {
                        console.log('üìß Email sent: ' + info.response);
                        resolve();
                    }
                });
            });
        };
        

        const sendOrderNotificationToAdmin = async (adminEmail) => {
            // G·ª≠i email th√¥ng b√°o ƒë∆°n h√†ng m·ªõi ƒë·∫øn Admin
            // Email ch·ª©a th√¥ng tin kh√°ch h√†ng v√† danh s√°ch s·∫£n ph·∫©m
        
            const mailOptions = {
                from: 'H·ªá Th·ªëng WebShop',
                to: adminEmail,  // Email Admin nh·∫≠n th√¥ng b√°o
                subject: 'üîî ƒê∆°n h√†ng m·ªõi v·ª´a ƒë∆∞·ª£c ƒë·∫∑t',
                html: `
                    <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                        <h2 style="text-align: center; color: #e74c3c; font-size: 24px;">üì¶ ƒê∆°n h√†ng m·ªõi</h2>
                        <p style="font-size: 16px;">M·ªôt kh√°ch h√†ng v·ª´a ƒë·∫∑t h√†ng th√†nh c√¥ng tr√™n h·ªá th·ªëng.</p>
                        
                        <h3 style="color: #2c3e50; font-size: 20px;">üë§ Th√¥ng tin kh√°ch h√†ng</h3>
                        <p><strong>H·ªç v√† t√™n:</strong> <span style="color: #2980b9;">${lastName} ${firstName}</span></p>
                        <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> <span style="color: #27ae60;">${phone}</span></p>
                        <p><strong>ƒê·ªãa ch·ªâ giao h√†ng:</strong> <span style="color: #34495e;">${address}</span></p>
        
                        <h3 style="color: #2c3e50; font-size: 20px;">üõí Th√¥ng tin ƒë∆°n h√†ng</h3>
                        <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse; width: 100%; background-color: #ffffff;">
                            <thead>
                                <tr>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">S·∫£n ph·∫©m</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">C·∫•u h√¨nh</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">S·ªë l∆∞·ª£ng</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">ƒê∆°n gi√°</th>
                                    <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">T·ªïng</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${productsHtml} <!-- Danh s√°ch s·∫£n ph·∫©m -->
                            </tbody>
                        </table>
        
                        <div style="background-color: #fff; padding: 15px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
                            <p><strong>üìå T·ªïng s·ªë l∆∞·ª£ng:</strong> <span style="color: #2980b9;">${tongSoLuong}</span> s·∫£n ph·∫©m</p>
                            <p><strong>üí∞ T·ªïng ti·ªÅn:</strong> <span style="color: #e74c3c;">${formatCurrency(thanhTien)}</span></p>
                            <p><strong>üöö Ph√≠ giao h√†ng:</strong> <span style="color: #2ecc71;">Mi·ªÖn ph√≠</span></p>
                            <p><strong>üéÅ Gi·∫£m gi√°:</strong> <span style="color: #e67e22;">-${formatCurrency(soTienGiamGia)}</span> (${giamGia}%)</p>
                            <p><strong>üí≥ S·ªë ti·ªÅn c·∫ßn thanh to√°n:</strong> <span style="color: #e74c3c;">${formatCurrency(soTienCanThanhToan)}</span></p>
                        </div>
        
                        <p style="text-align: center; font-size: 16px;">Admin c√≥ th·ªÉ qu·∫£n l√Ω ƒë∆°n h√†ng t·∫°i <a href="https://shopbandodientu.dokhactu.site/admin" style="color: #3498db; text-decoration: none;">Trang Qu·∫£n L√Ω</a></p>
                    </div>
                `
            };
        
            return new Promise((resolve, reject) => {
                transporter.sendMail(mailOptions, (error, info) => {
                    if (error) {
                        reject(error);
                    } else {
                        console.log('üìß Email th√¥ng b√°o ƒë∆°n h√†ng ƒë√£ g·ª≠i ƒë·∫øn Admin: ' + info.response);
                        resolve();
                    }
                });
            });
        };
        


        
        // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn c·ªßa t·ª´ng size trong s·∫£n ph·∫©m
        for (const item of products) {
            // T√¨m s·∫£n ph·∫©m trong database
            const product = await Product.findById(item._idSP);

            // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i
            if (!product) {
                return res.status(404).json({
                    message: `S·∫£n ph·∫©m v·ªõi ID ${item._idSP} kh√¥ng t·ªìn t·∫°i!`,
                });
            }

            // T√¨m size s·∫£n ph·∫©m trong m·∫£ng sizes
            const size = product.sizes.find(s => s.size === item.size);
            
            // Ki·ªÉm tra n·∫øu size kh√¥ng t·ªìn t·∫°i
            if (!size) {
                return res.status(400).json({
                    message: `Size ${item.size} c·ªßa s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!`,
                });
            }

            // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn c√≥ ƒë·ªß hay kh√¥ng
            if (size.quantity < item.quantity) {
                return res.status(400).json({
                    message: `S·∫£n ph·∫©m ${product.TenSP} - c·∫•u h√¨nh: ${item.size} ch·ªâ c√≤n ${size.quantity} s·∫£n ph·∫©m trong kho, b·∫°n kh√¥ng th·ªÉ ƒë·∫∑t ${item.quantity} s·∫£n ph·∫©m!`,
                });
            }
        }

        // T·∫°o ƒë∆°n h√†ng m·ªõi
        const newOrder = new Order({
            lastName, firstName, email, address, phone, note, products, soTienGiamGia, giamGia, soTienCanThanhToan, thanhTien, tongSoLuong, idKhachHang: idKhachHang || null
        });

        // L∆∞u ƒë∆°n h√†ng v√†o database
        await newOrder.save();

        // G·ª≠i email th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng
        await sendOrderConfirmationEmail(email);  
        
        // G·ª≠i email th√¥ng b√°o ƒë∆°n h√†ng m·ªõi ƒë·∫øn Admin
        const emailAdmin = 'dokhactu1822@gmail.com'
        await sendOrderNotificationToAdmin(emailAdmin)

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho v√† s·ªë l∆∞·ª£ng b√°n cho t·ª´ng s·∫£n ph·∫©m
        for (let product of products) {
            const { _idSP, size, quantity } = product;

            // T√¨m s·∫£n ph·∫©m theo _idSP
            const productData = await Product.findById(_idSP);

            if (productData) {
                console.log(`Found product: ${productData.TenSP}`);

                // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ k√≠ch th∆∞·ªõc (size) n√†o kh·ªõp v·ªõi size ƒë√£ ƒë·∫∑t kh√¥ng
                let updated = false;

                // Duy·ªát qua c√°c k√≠ch th∆∞·ªõc (sizes) c·ªßa s·∫£n ph·∫©m
                for (let sizeData of productData.sizes) {
                    if (sizeData.size === size) {
                        console.log(`Updating size ${sizeData.size} with quantity ${quantity}`);

                        // Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa size ƒë√£ ƒë·∫∑t
                        if (sizeData.quantity >= quantity) {
                            sizeData.quantity -= quantity;
                            productData.SoLuongBan += quantity;
                            updated = true;
                            break; // D·ª´ng v√≤ng l·∫∑p khi ƒë√£ t√¨m th·∫•y size t∆∞∆°ng ·ª©ng
                        } else {
                            console.log(`Not enough stock for size ${sizeData.size}`);
                            return res.status(400).json({ message: `Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng cho size ${sizeData.size}` });
                        }
                    }
                }

                // N·∫øu ƒë√£ c·∫≠p nh·∫≠t size th√¨ t√≠nh l·∫°i t·ªïng s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa s·∫£n ph·∫©m
                if (updated) {
                    // C·∫≠p nh·∫≠t l·∫°i SoLuongTon (t·ªïng s·ªë l∆∞·ª£ng t·ªìn kho)
                    productData.SoLuongTon = productData.sizes.reduce((total, size) => total + size.quantity, 0);
                    console.log(`Updated stock for product: ${productData.TenSP}, new SoLuongTon: ${productData.SoLuongTon}`);

                    // L∆∞u l·∫°i th√¥ng tin s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
                    await productData.save();
                }
            } else {
                console.log(`Product not found: ${productId}`);
            }
        }

        // Tr·∫£ v·ªÅ th√¥ng tin ƒë∆°n h√†ng ƒë√£ t·∫°o
        return res.status(201).json({
            message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!',
            data: newOrder,  
            _idDH:  newOrder._id,
            soTienCanThanhToan: newOrder.soTienCanThanhToan,    
        });
    } catch (error) {
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o ƒë∆°n h√†ng!',
            error: error.message,
        });
    }
};

const findOrderById = async (req, res) => {
    try {
        const idDH = req.query.idDH;
        const order = await Order.findOne({ _id: idDH }).exec();
        if (!order) {
            return { success: false, message: "Order not found!" };
        }
        return res.status(201).json({
            data: order,  
        });
    } catch (error) {
        console.error("Error finding order:", error);
        return { success: false, message: "Internal server error" };
    }
};

const createOrderThanhToanVNPay = async (req, res) => {
    try {
        const { lastName, firstName, email, address, phone, note,
            products, idKhachHang, thanhTien, soTienCanThanhToan, soTienGiamGia, giamGia, tongSoLuong
        } = req.body;

        console.log("lastName, firstName, email, address, phone, note: ", lastName, firstName, email, address, phone, note);
        console.log("products: ", products);
        console.log("idKhachHang: ", idKhachHang);
        console.log(" thanhTien, soTienCanThanhToan, soTienGiamGia, giamGia, tongSoLuong: ", thanhTien, soTienCanThanhToan, soTienGiamGia, giamGia, tongSoLuong); 
        
        // H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá VND
        const formatCurrency = (amount) => {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
            }).format(amount);
        }

        //---- G·ª¨I X√ÅC NH·∫¨N ƒê∆†N H√ÄNG V·ªÄ EMAIL
        const transporter = nodemailer.createTransport({
            service: 'Gmail',
            auth: {
            user: process.env.EMAIL_USER,
            pass: process.env.EMAIL_PASS
            }
        });

        // T·∫°o b·∫£ng HTML ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin ƒë∆°n h√†ng
        let productsHtml = '';

        // L·∫∑p qua c√°c s·∫£n ph·∫©m trong ƒë∆°n h√†ng
        for (const product of products) {
            // T√¨m s·∫£n ph·∫©m trong c∆° s·ªü d·ªØ li·ªáu b·∫±ng _idSP
            const productDetails = await Product.findById(product._idSP).exec();

            // Ki·ªÉm tra n·∫øu t√¨m th·∫•y s·∫£n ph·∫©m
            if (productDetails) {
                // Th√™m th√¥ng tin s·∫£n ph·∫©m v√†o b·∫£ng HTML
                productsHtml += `
                    <tr>
                        <td>${productDetails.TenSP}</td>  
                        <td>${product.size}</td>  
                        <td>${product.quantity}</td>  
                        <td>${formatCurrency(product.price)}</td>  <!-- Gi√° m·ªói s·∫£n ph·∫©m -->
                        <td>${formatCurrency(product.quantity * product.price)}</td>  <!-- T·ªïng ti·ªÅn cho s·∫£n ph·∫©m -->
                    </tr>
                `;
            }
        }       

        const sendOrderConfirmationEmail = async (toEmail) => {
            // T·∫°o n·ªôi dung email v·ªõi b·∫£ng s·∫£n ph·∫©m
            const mailOptions = {
                from: 'Tr∆∞∆°ng Ng·ªçc Ph√∫ dz',
                to: toEmail,
                subject: 'X√°c nh·∫≠n ƒë∆°n h√†ng c·ªßa b·∫°n.',
                html: `
                        <div style="max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                            <h2 style="text-align: center; color: #2c3e50; font-size: 24px;">C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng!</h2>
                            <p style="color: #34495e; font-size: 18px;">Ch√†o b·∫°n <span style="color: #e74c3c; font-weight: bold; font-style: italic;">${lastName} ${firstName}</span>,</p>
                            <p style="font-size: 16px;">ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.</p>
                            
                            <h3 style="color: #2c3e50; font-size: 20px; text-align: center;">Th√¥ng tin s·∫£n ph·∫©m ƒë√£ ƒë·∫∑t h√†ng</h3>                                        
                            <table border="1" cellpadding="8" cellspacing="0" style="border-collapse: collapse; width: 100%; margin-bottom: 20px; background-color: #ffffff;">
                                <thead>
                                    <tr>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">T√™n s·∫£n ph·∫©m</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">C·∫•u h√¨nh</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">S·ªë l∆∞·ª£ng</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">ƒê∆°n gi√°</th>
                                        <th style="text-align: left; padding: 8px; background-color: #ecf0f1; color: #2c3e50;">T·ªïng ti·ªÅn</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${productsHtml}
                                </tbody>
                            </table>

                            <div style="background-color: #fff; padding: 15px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                                <p><strong>T·ªïng s·ªë l∆∞·ª£ng ƒë·∫∑t:</strong> <span style="color: #2980b9;">${tongSoLuong}</span> s·∫£n ph·∫©m</p>
                                <p><strong>T·ªïng ti·ªÅn:</strong> <span style="color: #e74c3c;">${formatCurrency(thanhTien)}</span></p>
                                <p><strong>Ph√≠ giao h√†ng:</strong> <span style="color: #2ecc71;">0</span></p>
                                <p><strong>Gi·∫£m gi√°:</strong> <span style="color: #e67e22;">-${formatCurrency(soTienGiamGia)}</span> (${giamGia}%)</p>
                                <p><strong>S·ªë ti·ªÅn c·∫ßn thanh to√°n:</strong> <span style="color: #e74c3c;">${formatCurrency(soTienCanThanhToan)}</span></p>
                            </div>
                
                            <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ${phone}</p>
                            <p><strong>ƒê·ªãa ch·ªâ nh·∫≠n h√†ng:</strong> <span style="color: #34495e; font-style: italic;">${address}</span></p>
                            <br/>
                                                                                   
                            <p style="text-align: center; font-size: 16px;">B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng t·∫°i <a href="#" style="color: #3498db; text-decoration: none;">Shop CellphoneX</a></p>
                        </div>
                    `
            };

            return new Promise((resolve, reject) => {
                transporter.sendMail(mailOptions, (error, info) => {
                    if (error) {
                        reject(error);
                    } else {
                        console.log('Email sent: ' + info.response);
                        resolve();
                    }
                });
            });
        };


        
        // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn c·ªßa t·ª´ng size trong s·∫£n ph·∫©m
        for (const item of products) {
            // T√¨m s·∫£n ph·∫©m trong database
            const product = await Product.findById(item._idSP);

            // Ki·ªÉm tra n·∫øu s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i
            if (!product) {
                return res.status(404).json({
                    message: `S·∫£n ph·∫©m v·ªõi ID ${item._idSP} kh√¥ng t·ªìn t·∫°i!`,
                });
            }

            // T√¨m size s·∫£n ph·∫©m trong m·∫£ng sizes
            const size = product.sizes.find(s => s.size === item.size);
            
            // Ki·ªÉm tra n·∫øu size kh√¥ng t·ªìn t·∫°i
            if (!size) {
                return res.status(400).json({
                    message: `Size ${item.size} c·ªßa s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá!`,
                });
            }

            // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn c√≥ ƒë·ªß hay kh√¥ng
            if (size.quantity < item.quantity) {
                return res.status(400).json({
                    message: `S·∫£n ph·∫©m ${product.TenSP} - c·∫•u h√¨nh: ${item.size} ch·ªâ c√≤n ${size.quantity} s·∫£n ph·∫©m trong kho, b·∫°n kh√¥ng th·ªÉ ƒë·∫∑t ${item.quantity} s·∫£n ph·∫©m!`,
                });
            }
        }

        // T·∫°o ƒë∆°n h√†ng m·ªõi
        const newOrder = new Order({
            lastName, firstName, email, address, phone, note, products, soTienGiamGia, giamGia, soTienCanThanhToan, thanhTien, tongSoLuong, idKhachHang: idKhachHang || null
        });

        // L∆∞u ƒë∆°n h√†ng v√†o database
        await newOrder.save();

        // G·ª≠i email th√¥ng b√°o ƒë·∫∑t h√†ng th√†nh c√¥ng
        await sendOrderConfirmationEmail(email);

        // L·∫•y returnUrl t·ª´ frontend g·ª≠i l√™n, n·∫øu kh√¥ng c√≥ th√¨ s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
        const returnUrl = req.body?.returnUrl || 'http://localhost:8089/api/order/vnpay_return';
        console.log("newOrder._id.toString(): ", newOrder._id.toString());
        
        // T·∫°o URL thanh to√°n
        const paymentUrl = vnpay.buildPaymentUrl({
            vnp_Amount: soTienCanThanhToan,
            vnp_IpAddr:
                req.headers['x-forwarded-for'] ||
                req.connection.remoteAddress ||
                req.socket.remoteAddress ||
                req.ip,
            vnp_TxnRef: newOrder._id.toString(),
            vnp_OrderInfo: `Thanh toan don hang ${newOrder._id}`,
            vnp_OrderType: ProductCode.Other,
            vnp_ReturnUrl: returnUrl, // ƒê∆∞·ªùng d·∫´n n√™n l√† c·ªßa frontend
            vnp_Locale: VnpLocale.VN,
        });

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho v√† s·ªë l∆∞·ª£ng b√°n cho t·ª´ng s·∫£n ph·∫©m
        for (let product of products) {
            const { _idSP, size, quantity } = product;

            // T√¨m s·∫£n ph·∫©m theo _idSP
            const productData = await Product.findById(_idSP);

            if (productData) {
                console.log(`Found product: ${productData.TenSP}`);

                // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ k√≠ch th∆∞·ªõc (size) n√†o kh·ªõp v·ªõi size ƒë√£ ƒë·∫∑t kh√¥ng
                let updated = false;

                // Duy·ªát qua c√°c k√≠ch th∆∞·ªõc (sizes) c·ªßa s·∫£n ph·∫©m
                for (let sizeData of productData.sizes) {
                    if (sizeData.size === size) {
                        console.log(`Updating size ${sizeData.size} with quantity ${quantity}`);

                        // Gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa size ƒë√£ ƒë·∫∑t
                        if (sizeData.quantity >= quantity) {
                            sizeData.quantity -= quantity;
                            productData.SoLuongBan += quantity;
                            updated = true;
                            break; // D·ª´ng v√≤ng l·∫∑p khi ƒë√£ t√¨m th·∫•y size t∆∞∆°ng ·ª©ng
                        } else {
                            console.log(`Not enough stock for size ${sizeData.size}`);
                            return res.status(400).json({ message: `Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng cho size ${sizeData.size}` });
                        }
                    }
                }

                // N·∫øu ƒë√£ c·∫≠p nh·∫≠t size th√¨ t√≠nh l·∫°i t·ªïng s·ªë l∆∞·ª£ng t·ªìn kho c·ªßa s·∫£n ph·∫©m
                if (updated) {
                    // C·∫≠p nh·∫≠t l·∫°i SoLuongTon (t·ªïng s·ªë l∆∞·ª£ng t·ªìn kho)
                    productData.SoLuongTon = productData.sizes.reduce((total, size) => total + size.quantity, 0);
                    console.log(`Updated stock for product: ${productData.TenSP}, new SoLuongTon: ${productData.SoLuongTon}`);

                    // L∆∞u l·∫°i th√¥ng tin s·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t
                    await productData.save();
                }
            } else {
                console.log(`Product not found: ${productId}`);
            }
        }

        // Tr·∫£ v·ªÅ th√¥ng tin ƒë∆°n h√†ng ƒë√£ t·∫°o
        return res.status(201).json({
            message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!',
            data: newOrder,
            paymentUrl
        });
    } catch (error) {
        return res.status(500).json({
            message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o ƒë∆°n h√†ng!',
            error: error.message,
        });
    }
};

const updateCongTienKhiNap = async (req, res) => {
    const session = await mongoose.startSession();

    try {
        await session.startTransaction();

        const sePayWebhookData = {
            id: parseInt(req.body.id),
            gateway: req.body.gateway,
            transactionDate: req.body.transactionDate,
            accountNumber: req.body.accountNumber,
            subAccount: req.body.subAccount,
            code: req.body.code,
            content: req.body.content,
            transferType: req.body.transferType,
            description: req.body.description,
            transferAmount: parseFloat(req.body.transferAmount),
            referenceCode: req.body.referenceCode,
            accumulated: parseInt(req.body.accumulated),
        };

        // n·∫øu SePayTransaction c√≥ h∆°n 1 giao d·ªãch collection 
        if (await SePayTransaction.countDocuments() > 0) {
            const existingTransaction = await SePayTransaction.findOne({
                _id: sePayWebhookData.id,
            });
            if (existingTransaction) {
                return res.status(400).json({
                    message: "transaction n√†y ƒë√£ th·ª±c hi·ªán giao d·ªãch",
                });
            }
        }

        // api ch·ª©ng th·ª±c
        const pattern = process.env.SEPAY_API_KEY;
        const authorizationAPI = req.headers.authorization;
        const apiKey = authorizationAPI.split(" ")[1];

        // ki·ªÉm tra x√°c th·ª±c api
        if (pattern === apiKey) {
            // T·∫°o l·ªãch s·ª≠ giao d·ªãch
            const newTransaction = await SePayTransaction.create({
                _id: sePayWebhookData.id,
                gateway: sePayWebhookData.gateway,
                transactionDate: sePayWebhookData.transactionDate,
                accountNumber: sePayWebhookData.accountNumber,
                subAccount: sePayWebhookData.subAccount,
                code: sePayWebhookData.code,
                content: sePayWebhookData.content,
                transferType: sePayWebhookData.transferType,
                description: sePayWebhookData.description,
                transferAmount: sePayWebhookData.transferAmount,
                referenceCode: sePayWebhookData.referenceCode,
            });

            // const matchContent = sePayWebhookData.content.match(/dh([a-f0-9]{24})/);
            const matchContent = sePayWebhookData.content.match(/DH([a-zA-Z0-9]{6,30})/);
            console.log("matchContent: ", matchContent);                
            const idOrder = matchContent[0].replace("DH", "");
            console.log("idOrder: ", idOrder);           
            
            // T√¨m ƒë∆°n h√†ng trong database
            const order = await Order.findById(idOrder).session(session);
            if (!order) {
                res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng." });
            }

            // Ki·ªÉm tra s·ªë ti·ªÅn thanh to√°n c√≥ kh·ªõp v·ªõi s·ªë ti·ªÅn c·∫ßn thanh to√°n kh√¥ng
            if (order.soTienCanThanhToan !== sePayWebhookData.transferAmount) {
                res.status(404).json({ message: "S·ªë ti·ªÅn thanh to√°n kh√¥ng kh·ªõp" });
            }
            
            const updatedUser = await Order.findOneAndUpdate(
                // { _id: idOrder },
                { _id: idOrder },
                {
                    $set: { TinhTrangThanhToan: "ƒê√£ Thanh To√°n" },
                    $push: {
                        transactionHistory: {
                            date: new Date(),
                            amount: sePayWebhookData.transferAmount,
                            type: "deposit",
                            reference: sePayWebhookData.id,
                        },
                    },
                },
                { new: true, session }
            );

            if (!updatedUser) {
                return res
                    .status(404)
                    .json({ message: "User account not found" });
            }
            await session.commitTransaction();

            return res.status(200).json({
                success: true,
                newBalance: updatedUser.TinhTrangThanhToan,
                processedAt: new Date().toISOString(),
                message: `Thanh to√°n th√†nh c√¥ng`,
            });
        }
        return res.status(400).json({ message: "Invalid transaction" });
    } catch (error) {
        await session.abortTransaction(); // H·ªßy giao d·ªãch n·∫øu c√≥ l·ªói
        console.error("L·ªói:", error);
        return res.status(500).json({ message: error.message || "Internal Server Error" });
    } finally {
        session.endSession();
    }
};

module.exports = { createOrder, createOrderThanhToanVNPay, updateCongTienKhiNap, findOrderById };
